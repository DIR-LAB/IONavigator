import { traceDiagnosis, Trace, Message, chatHistory } from '../interface/interfaces';
import { io, Socket } from 'socket.io-client';

let socket: Socket;

export const initializeSocket = () => {
  socket = io(process.env.REACT_APP_WEBSOCKET_URL || '', {
    transports: ['websocket'],
    upgrade: false,
    reconnection: true,
    reconnectionAttempts: 5,
    reconnectionDelay: 1000
  });
  
  socket.on('connect', () => {
    console.log('Connected to WebSocket server');
    console.log('Transport:', socket.io.engine.transport.name);
  });

  socket.on('error', (error) => {
    console.error('WebSocket error:', error);
  });

  socket.on('disconnect', (reason) => {
    console.log('Disconnected from WebSocket server:', reason);
  });

  socket.on('connect_error', (error) => {
    console.error('Connection error:', error);
  });

  return socket;
};

//read from env
const API_BASE_URL = process.env.REACT_APP_FLASK_API_BASE_URL;
console.log(API_BASE_URL);

// login user
export async function loginUser(email: string): Promise<string> {
  try {
    console.log(`${API_BASE_URL}/api/user`);
    const response = await fetch(`${API_BASE_URL}/api/user`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email: email }),
    });
    
    if (!response.ok) {
      throw new Error('Failed to login user');
    }
    
    const data = await response.json();
    return data.user_id; // Return the UUID generated by the backend
  } catch (error) {
    console.error('Error logging in user:', error);
    throw error;
  }
}   

// get user info
export async function getUserInfo(email: string): Promise<string> {
  try {
    const response = await fetch(`${API_BASE_URL}/get_user_info/${email}`);
    return response.json();
  } catch (error) {
    console.error('Error getting user info:', error);
    throw error;
  }
}

// fetch example cases
export async function fetchUserTraces(user_id: string): Promise<Array<Trace>> {
    try {
      console.log(`${API_BASE_URL}/api/user_traces`);
      const response = await fetch(`${API_BASE_URL}/api/user_traces`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_id: user_id }),
      });
      const data = await response.json();
      console.log(data);
      return data;
    } catch (error) {
      console.error('Error fetching user traces:', error);
      throw error;
    }
  }

  export async function fetchTraceDiagnosis(trace_name: string, userId: string): Promise<{trace_diagnosis: traceDiagnosis, id: string}> {
    try {
      const response = await fetch(`${API_BASE_URL}/api/trace_examples/${trace_name}/final_diagnosis`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_id: userId }),
      });
      return response.json();
    } catch (error) {
      console.error('Error fetching trace diagnosis:', error);
      throw error;
    }
  }

  export async function fetchSampleQuestions(trace_name: string, user_id: string): Promise<Array<string>> {
    try {
      const response = await fetch(`${API_BASE_URL}/api/trace_examples/${trace_name}/sample_questions`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_id: user_id }),
      });
      return response.json();
    } catch (error) {
      console.error('Error fetching sample questions:', error);
      throw error;
    }
  }

  export const sendChatMessage = (
    chatHistory: Array<Message>, 
    traceDiagnosis: traceDiagnosis, 
    trace: Trace,
    user_id: string
  ) => {
    if (!socket || !socket.connected) {
      console.error('Socket not connected!');
      return;
    }

    const payload = {
      chat_history: chatHistory,
      trace_diagnosis: traceDiagnosis,
      trace_name: trace.trace_name,
      user_id: user_id
    };
    console.log('Sending message payload:', payload);
    socket.emit('send_message', payload);
  };

  export async function fetchOriginalTrace(trace_name: string, user_id: string): Promise<string> {
    try {
      const response = await fetch(`${API_BASE_URL}/api/trace_examples/${trace_name}/original_trace`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ user_id: user_id }),
      });
      if (!response.ok) {
        throw new Error('Failed to fetch original trace');
      }
      const data = await response.json();
      return data.original_trace;
    } catch (error) {
      console.error('Error fetching original trace:', error);
      throw error;
    }
  }

  export async function fetchDiagnosisHtml(trace_name: string): Promise<string> {
    try {
      const response = await fetch(`${API_BASE_URL}/api/trace_examples/${trace_name}/html_diagnosis`);
      if (!response.ok) {
        throw new Error('Failed to fetch diagnosis HTML');
      }
      return response.text(); // Return the HTML content as text
    } catch (error) {
      console.error('Error fetching diagnosis HTML:', error);
      throw error;
    }
  }


  export const updateFeedback = async (chatHistory: chatHistory, user_email: string) => {
    // call update_chat_history
    try {
      const response = await updateChatHistory(chatHistory, user_email);
      return response;
    } catch (error) {
    console.error('Error updating feedback:', error);
    throw error;
  } 
};


export const updateChatHistory = async (chatHistory: chatHistory, user_email: string) => {
  try {
    const response = await fetch(`${API_BASE_URL}/api/update_history`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_history: chatHistory,
            email: user_email
        }),
    });

    if (!response.ok) {
        throw new Error('Failed to update feedback');
    }

    return await response.json();
  } catch (error) {
      console.error('Error updating feedback:', error);
      throw error;
  }
};

export async function deleteTrace(trace_name: string, user_id: string): Promise<void> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/delete_trace`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        trace_name: trace_name,
        user_id: user_id 
      }),
    });
    
    if (!response.ok) {
      throw new Error('Failed to delete trace');
    }
  } catch (error) {
    console.error('Error deleting trace:', error);
    throw error;
  }
}

export async function startAnalysis(trace_name: string, user_id: string, llm: string): Promise<string> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/run_analysis`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        trace_name: trace_name,
        user_id: user_id,
        llm: llm
      }),
    });
    
    if (!response.ok) {
      throw new Error('Failed to start analysis');
    }

    const data = await response.json();
    return data.task_id;
  } catch (error) {
    console.error('Error starting analysis:', error);
    throw error;
  }
}

export async function stopAnalysis(trace_name: string, user_id: string): Promise<void> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/stop_analysis`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ 
        trace_name: trace_name,
        user_id: user_id 
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to stop analysis');
    }
  } catch (error) {
    console.error('Error stopping analysis:', error); 
    throw error;
  }
}


export async function checkAnalysisStatus(task_id: string): Promise<{
  status: string;
  progress: number;
  result?: string;
  error?: string;
}> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/analysis_status/${task_id}`);
    
    if (!response.ok) {
      throw new Error('Failed to check analysis status');
    }

    return response.json();
  } catch (error) {
    console.error('Error checking analysis status:', error);
    throw error;
  }
}

export async function renderContent(content: any, name: string): Promise<string> {
  try {
    const content_type = name.endsWith('.txt') || name.endsWith('.md') ? 'md' : 'json';
    const response = await fetch(`${API_BASE_URL}/api/render_content`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ content, content_type }),
    });

    if (!response.ok) {
      throw new Error('Failed to render content');
    }

    const data = await response.text();
    return data;
  } catch (error) {
    console.error('Error rendering content:', error);
    throw error;
  }
}

export async function fetchDiagnosisTree(trace_name: string, user_id: string): Promise<any> {
  try {
    console.log(`Fetching diagnosis tree for ${trace_name}`);
    const response = await fetch(`${API_BASE_URL}/api/trace_examples/${trace_name}/diagnosis_tree`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ user_id: user_id }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to fetch diagnosis tree');
    }

    const data = await response.json();
    console.log('Received diagnosis tree data:', data);
    return data;
  } catch (error) {
    console.error('Error fetching diagnosis tree:', error);
    throw error;
  }
}

export async function renameTrace(oldName: string, newName: string, userId: string): Promise<void> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/rename_trace`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: userId,
        old_name: oldName,
        new_name: newName
      }),
    });
    
    if (!response.ok) {
      throw new Error('Failed to rename trace');
    }
  } catch (error) {
    console.error('Error renaming trace:', error);
    throw error;
  }
}

export async function uploadTrace(file: File, userId: string): Promise<{
  message: string;
  trace_name: string;
}> {
  try {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('user_id', userId);

    const response = await fetch(`${API_BASE_URL}/api/upload_trace`, {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Upload failed');
    }

    return response.json();
  } catch (error) {
    console.error('Error uploading trace:', error);
    throw error;
  }
}

export async function updateTraceModel(traceName: string, model: string, userId: string): Promise<void> {
  try {
    const response = await fetch(`${API_BASE_URL}/api/update_trace_model`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: userId,
        trace_name: traceName,
        model: model
      }),
    });
    
    if (!response.ok) {
      throw new Error('Failed to update trace model');
    }
  } catch (error) {
    console.error('Error updating trace model:', error);
    throw error;
  }
}

